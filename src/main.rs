
use diesel::pg::PgConnection;
use diesel::prelude::*;
use diesel::RunQueryDsl;
use dotenvy::dotenv;
use std::env;

// Schema auto generated by diesel.rs:
pub mod schema;

#[derive(Queryable,Insertable,AsChangeset)]
#[diesel(table_name=schema::posts)]
pub struct Post {
    pub id: i32,
    pub title: String,
    pub body: String,
    pub published: bool,
}

pub fn establish_connection() -> PgConnection {
    dotenv().ok();

    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
    PgConnection::establish(&database_url)
        .unwrap_or_else(|_| panic!("Error connecting to {}", database_url))
}


fn main() {

    let connection = &mut establish_connection();

    let initial_post = Post {
        id: 1,
        title: "Hello World".to_string(),
        body: "This is my first post".to_string(),
        published: false,
    };

    use schema::posts::dsl::*;
    diesel::insert_into(posts)
        .values(&initial_post)
        .on_conflict(id)
        .do_nothing()
        .execute(connection)
        .expect("Error saving new post");

    let post_set = vec![ Post {
        id: 1,
        title: "Hello World".to_string(),
        body: "This is my first post, with some edits".to_string(),
        published: true,
    },
    Post {
        id: 2,
        title: "Hello World 2".to_string(),
        body: "This is my second post".to_string(),
        published: false,
    }];

    // Now, we can do it like this, but with 100+ columns, this is not ideal:

    use diesel::upsert::excluded;

    let rows_affected = diesel::insert_into(posts)
        .values(&post_set)
        .on_conflict(id)
        .do_update()
        // ==== CAN THIS SECTION BE MORE DRY? ====
        .set((
            id.eq(excluded(id)),
            title.eq(excluded(title)),
            body.eq(excluded(body)),
            published.eq(excluded(published)),
        ))
        // ======================================
        .execute(connection).unwrap();

    println!("{} rows affected", rows_affected);
}
